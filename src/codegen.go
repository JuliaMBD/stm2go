package stm2go

import (
	"io"
)

const srcdir string = "src"

type GoPkgSource struct {
	Fullpkgname string `json: "fullpkgname"`
	Domain      string `json: "domain"`
	Pkgname     string `json: "pkgname"`
}

type GoSTMSource struct {
	Id      string
	ss      []*State
	ts      map[*State][]*Transition
	initial *State
	pkg     *GoPkgSource
	root    bool
}

// A function to create GoSource
//   out: io.Writer (e.g. os.Stdout)
//   domain: domain name for package
//   pkgname: package name
func NewGoPkgSource(domain string, pkgname string) *GoPkgSource {
	return &GoPkgSource{
		Fullpkgname: domain + "/" + pkgname,
		Domain:      domain,
		Pkgname:     pkgname,
	}
}

// A function to create GoSTMSource
//   out: io.Writer
//   name: name of STM
//   ss: Slice of States
//   ts: Slice of Transitions
//   initial: Initial State
//   pkg: GoSource for Pkg
//   root: Indicator whether the stm is root or not
func NewGoSTMSource(name string,
	ss []*State, ts []*Transition, initial *State, pkg *GoPkgSource, root bool) *GoSTMSource {
	return &GoSTMSource{
		Id:      name,
		ss:      ss,
		ts:      makeTransitionMap(ts),
		initial: initial,
		pkg:     pkg,
		root:    root,
	}
}

// A function to make map between a parent state and a state machine
func NewGoSTMMap(pkg *GoPkgSource, stms map[string]*StateMachine, states map[string]*State) ([]*GoSTMSource, map[*State][]*GoSTMSource, *State) {
	stmap := make([]*GoSTMSource, 0)
	sttree := make(map[*State][]*GoSTMSource)
	root := &State{Name: "root"}
	for k, s := range stms {
		st := NewGoSTMSource(k, s.States, s.Transitions, s.Initial, pkg, false)
		stmap = append(stmap, st)
		if p, ok := states[s.Parent]; ok {
			if _, ok := sttree[p]; ok {
				sttree[p] = append(sttree[p], st)
			} else {
				sttree[p] = []*GoSTMSource{st}
			}
		} else {
			if _, ok := sttree[root]; ok {
				sttree[root] = append(sttree[root], st)
			} else {
				sttree[root] = []*GoSTMSource{st}
			}
		}
	}
	for i := range sttree[root] {
		sttree[root][i].root = true
	}
	return stmap, sttree, root
}

type Writer struct {
	out io.Writer
}

func NewWriter(out io.Writer) *Writer {
	return &Writer{
		out: out,
	}
}

// A function to write source
func (w *Writer) writeln(s string) {
	w.out.Write([]byte(s + "\n"))
}

// A function to make the map for transitions
func makeTransitionMap(ts []*Transition) map[*State][]*Transition {
	m := make(map[*State][]*Transition)
	for _, t := range ts {
		if _, ok := m[t.Src]; ok {
			m[t.Src] = append(m[t.Src], t)
		} else {
			m[t.Src] = []*Transition{t}
		}
	}
	return m
}

// A function to generate the string of header
func (g *GoSTMSource) BaseHeader(w *Writer) {
	w.writeln("// This file was generated by a program.")
	w.writeln("// Please do not edit this file directly.")
	w.writeln("package " + g.pkg.Pkgname + "\n")
	w.writeln("import (\n// package names to be imported\n)\n")
}

// A function to generate Enum for states
func (g *GoSTMSource) BaseStateDefinition(w *Writer, names map[string]string) {
	stm := names[g.Id]
	ss := g.ss
	w.writeln("type " + stm + "State uint8")
	w.writeln("const (")
	for i, s := range ss {
		if i == 0 {
			w.writeln(stm + s.Name + " " + stm + "State = iota")
		} else {
			w.writeln(stm + s.Name)
		}
	}
	w.writeln(")\n")
	w.writeln("var " + stm + "Eod Eod")
	w.writeln("var " + stm + "CurrentState " + stm + "State")
	w.writeln("var " + stm + "NextState " + stm + "State\n")
}

// A function to generate init function
func (g *GoSTMSource) BaseStateInitialize(w *Writer, names map[string]string) {
	stm := names[g.Id]
	i := stm + g.initial.Name
	w.writeln("func init() {")
	w.writeln(stm + "Initialize()")
	w.writeln("}\n")
	w.writeln("func " + stm + "Initialize() {")
	w.writeln(stm + "Eod = Entry")
	w.writeln(stm + "CurrentState = " + i)
	w.writeln(stm + "NextState = " + i)
	w.writeln("}\n")
}

// A function to generate base for a given STM
func (g *GoSTMSource) BaseTransDefinition(w *Writer, names map[string]string) {
	stm := names[g.Id]
	ss := g.ss
	ts := g.ts
	if g.root {
		w.writeln("func Entry" + stm + "Task() {")
		w.writeln(stm + "Task()")
		w.writeln(stm + "Update()")
		w.writeln("}\n")
	}
	w.writeln("func " + stm + "Task() {")
	w.writeln("switch " + stm + "CurrentState {")
	for _, s := range ss {
		w.writeln("case " + stm + s.Name + ":")
		w.writeln("if " + stm + "Eod == Entry {")
		w.writeln(stm + s.Name + "Entry()")
		w.writeln(stm + "Eod = Do")
		w.writeln("}")
		w.writeln("if " + stm + "Eod == Do {")
		w.writeln(stm + s.Name + "Do()")
		for _, t := range ts[s] {
			tr := stm + s.Name + t.Event.Name
			w.writeln("if " + tr + "Cond() {")
			w.writeln(tr + "Action()")
			w.writeln(stm + "NextState = " + stm + t.Dest.Name)
			w.writeln(stm + "Eod = Exit")
			w.writeln("}")
		}
		w.writeln("}")
		w.writeln("if " + stm + "Eod == Exit {")
		w.writeln(stm + s.Name + "Exit()")
		w.writeln(stm + "Eod = Entry")
		w.writeln("}")
	}
	w.writeln("}")
	w.writeln("}\n")
}

// A function to generate base for a given STM
func (g *GoSTMSource) UpdateDefinition(w *Writer, sttree map[*State][]*GoSTMSource, names map[string]string) {
	stm := names[g.Id]
	ss := g.ss
	w.writeln("func " + stm + "Update() {")
	w.writeln("switch " + stm + "CurrentState {")
	for _, s := range ss {
		w.writeln("case " + stm + s.Name + ":")
		if stms, ok := sttree[s]; ok {
			for _, stm := range stms {
				w.writeln(names[stm.Id] + "Update() // Call the update for " + names[stm.Id])
			}
		}
	}
	w.writeln("}")
	w.writeln(stm + "CurrentState = " + stm + "NextState")
	w.writeln("}\n")
}

// A function to generate the string of header for impl
func (g *GoSTMSource) ImplHeader(w *Writer) {
	w.writeln("// This file was generated by a program.")
	w.writeln("package " + g.pkg.Pkgname)
	w.writeln("import (\n// package names to be imported\n)")
}

// A function to generate template functions
func (g *GoSTMSource) ImplFunctions(w *Writer, sttree map[*State][]*GoSTMSource, names map[string]string) {
	stm := names[g.Id]
	ss := g.ss
	ts := g.ts
	for _, s := range ss {
		w.writeln("///////////////////////////////////////////////")
		w.writeln("// functions for State " + stm + s.Name)
		w.writeln("///////////////////////////////////////////////\n")
		w.writeln("func " + stm + s.Name + "Entry() {")
		if stms, ok := sttree[s]; ok {
			for _, stm := range stms {
				w.writeln(names[stm.Id] + "Initialize() // Call the initialize for " + names[stm.Id])
			}
		}
		w.writeln("if debug {")
		w.writeln("logger.Println(\"Entering State " + stm + s.Name + "\")")
		w.writeln("}")
		w.writeln("// Please write an enter process for State " + stm + s.Name)
		w.writeln("}\n")
		w.writeln("func " + stm + s.Name + "Do() {")
		if stms, ok := sttree[s]; ok {
			for _, stm := range stms {
				w.writeln(names[stm.Id] + "Task() // Call the task for " + names[stm.Id])
			}
		}
		w.writeln("// Please write a do process for State " + stm + s.Name)
		w.writeln("}\n")
		w.writeln("func " + stm + s.Name + "Exit() {")
		w.writeln("if debug {")
		w.writeln("logger.Println(\"Leaving State " + stm + s.Name + "\")")
		w.writeln("}")
		w.writeln("// Please write an exit process for State " + stm + s.Name)
		w.writeln("}\n")
	}
	w.writeln("///////////////////////////////////////////////")
	w.writeln("// Conditions")
	w.writeln("///////////////////////////////////////////////\n")
	for _, s := range ss {
		for _, t := range ts[s] {
			tr := stm + s.Name + t.Event.Name
			w.writeln("func " + tr + "Cond() bool {")
			w.writeln("// Please edit the condition")
			w.writeln("return true")
			w.writeln("}\n")
		}
	}
	w.writeln("///////////////////////////////////////////////")
	w.writeln("// Actions")
	w.writeln("///////////////////////////////////////////////\n")
	for _, s := range ss {
		for _, t := range ts[s] {
			tr := stm + s.Name + t.Event.Name
			w.writeln("func " + tr + "Action() {")
			w.writeln("// Please edit the action when " + t.Event.Name + " occurs at State " + s.Name)
			w.writeln("}\n")
		}
	}
}

// A function to generate Common
func (g *GoPkgSource) Common(w *Writer) {
	w.writeln("// This file was generated by a program.")
	w.writeln("package " + g.Pkgname + "\n")
	w.writeln("import (\n// package names to be imported\n)\n")
	w.writeln("type Eod uint8\n")
	w.writeln("const (")
	w.writeln("Entry Eod = iota")
	w.writeln("Do")
	w.writeln("Exit")
	w.writeln(")\n")
	w.writeln("type DebugLogger interface {\nPrintln(string)\n}\n")
	w.writeln("var logger DebugLogger\n")
	w.writeln("func ConfigureLog(p DebugLogger) {\nlogger = p\n}\n")
	w.writeln("const (\ndebug = true\n)\n")
}

// A function to generate an example of test code
func (g *GoPkgSource) TestGen(w *Writer, stms []*GoSTMSource, names map[string]string) {
	w.writeln("// This file was generated by a program.")
	w.writeln("package " + g.Pkgname + "\n")
	w.writeln("import (\n\"log\"\n\"testing\"\n\"time\"\n stm2go \"github.com/JuliaMBD/stm2go/testing\"\n)\n")
	w.writeln("type DebugStruct struct{}\n")
	w.writeln("func (l DebugStruct) Println(s string) {")
	w.writeln("log.Println(s)")
	w.writeln("}\n")
	w.writeln("func " + "TestExample(t *testing.T) {")
	w.writeln("ConfigureLog(DebugStruct{})\n")
	w.writeln("env := stm2go.NewTestEnv()\n")
	w.writeln("env.Add(stm2go.Continue, func() {")
	w.writeln("for {")
	w.writeln("time.Sleep(10 * time.Millisecond)")
	for _, stm := range stms {
		w.writeln("Entry" + names[stm.Id] + "Task()")
	}
	w.writeln("}")
	w.writeln("})")
	w.writeln("env.Add(stm2go.Done, func() {")
	w.writeln("time.Sleep(100 * time.Millisecond) // 10 times runs")
	w.writeln("})")
	w.writeln("env.Set(1)")
	w.writeln("env.Go()")
	w.writeln("}")
}

// A function to generate an example of main
func (g *GoPkgSource) GenMain(w *Writer, stms []*GoSTMSource, names map[string]string) {
	w.writeln("package main\n")
	w.writeln("import (\"time\"\n" + g.Pkgname + " \"" + g.Fullpkgname + "/" + srcdir + "\"\n)\n")
	w.writeln("func main() {")
	w.writeln("for {")
	for _, stm := range stms {
		w.writeln(g.Pkgname + ".Entry" + names[stm.Id] + "Task()")
	}
	w.writeln("time.Sleep(time.Millisecond * 10)")
	w.writeln("}")
	w.writeln("}")
}
